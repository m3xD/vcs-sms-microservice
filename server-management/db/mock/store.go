// Code generated by MockGen. DO NOT EDIT.
// Source: server-management/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -destination db/mock/store.go server-management/db/sqlc Store
//

// Package mock_sqlc is a generated GoMock package.
package mock_sqlc

import (
	context "context"
	reflect "reflect"
	db "server-management/db/sqlc"

	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateScope mocks base method.
func (m *MockStore) CreateScope(arg0 context.Context, arg1 db.CreateScopeParams) (db.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScope", arg0, arg1)
	ret0, _ := ret[0].(db.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScope indicates an expected call of CreateScope.
func (mr *MockStoreMockRecorder) CreateScope(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScope", reflect.TypeOf((*MockStore)(nil).CreateScope), arg0, arg1)
}

// CreateServer mocks base method.
func (m *MockStore) CreateServer(arg0 context.Context, arg1 db.CreateServerParams) (db.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServer", arg0, arg1)
	ret0, _ := ret[0].(db.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServer indicates an expected call of CreateServer.
func (mr *MockStoreMockRecorder) CreateServer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockStore)(nil).CreateServer), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteScope mocks base method.
func (m *MockStore) DeleteScope(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScope", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteScope indicates an expected call of DeleteScope.
func (mr *MockStoreMockRecorder) DeleteScope(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScope", reflect.TypeOf((*MockStore)(nil).DeleteScope), arg0, arg1)
}

// DeleteServer mocks base method.
func (m *MockStore) DeleteServer(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServer indicates an expected call of DeleteServer.
func (mr *MockStoreMockRecorder) DeleteServer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServer", reflect.TypeOf((*MockStore)(nil).DeleteServer), arg0, arg1)
}

// GetAllServers mocks base method.
func (m *MockStore) GetAllServers(arg0 context.Context) ([]db.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllServers", arg0)
	ret0, _ := ret[0].([]db.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllServers indicates an expected call of GetAllServers.
func (mr *MockStoreMockRecorder) GetAllServers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllServers", reflect.TypeOf((*MockStore)(nil).GetAllServers), arg0)
}

// GetScope mocks base method.
func (m *MockStore) GetScope(arg0 context.Context, arg1 int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScope", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScope indicates an expected call of GetScope.
func (mr *MockStoreMockRecorder) GetScope(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScope", reflect.TypeOf((*MockStore)(nil).GetScope), arg0, arg1)
}

// GetServer mocks base method.
func (m *MockStore) GetServer(arg0 context.Context, arg1 db.GetServerParams) ([]db.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer", arg0, arg1)
	ret0, _ := ret[0].([]db.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServer indicates an expected call of GetServer.
func (mr *MockStoreMockRecorder) GetServer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockStore)(nil).GetServer), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// UpdateRole mocks base method.
func (m *MockStore) UpdateRole(arg0 context.Context, arg1 db.UpdateRoleParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockStoreMockRecorder) UpdateRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockStore)(nil).UpdateRole), arg0, arg1)
}

// UpdateScope mocks base method.
func (m *MockStore) UpdateScope(arg0 context.Context, arg1 db.UpdateScopeParams) (db.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScope", arg0, arg1)
	ret0, _ := ret[0].(db.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateScope indicates an expected call of UpdateScope.
func (mr *MockStoreMockRecorder) UpdateScope(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScope", reflect.TypeOf((*MockStore)(nil).UpdateScope), arg0, arg1)
}

// UpdateServer mocks base method.
func (m *MockStore) UpdateServer(arg0 context.Context, arg1 db.UpdateServerParams) (db.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServer", arg0, arg1)
	ret0, _ := ret[0].(db.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServer indicates an expected call of UpdateServer.
func (mr *MockStoreMockRecorder) UpdateServer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServer", reflect.TypeOf((*MockStore)(nil).UpdateServer), arg0, arg1)
}
