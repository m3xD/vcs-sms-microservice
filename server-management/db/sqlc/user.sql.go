// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  password,
  email,
  role
) VALUES (
  $1, $2, $3, $4
) RETURNING id, username, password, email, role
`

type CreateUserParams struct {
	Username string
	Password string
	Email    string
	Role     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Role,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, email, role FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Role,
	)
	return i, err
}

const updateRole = `-- name: UpdateRole :one
UPDATE users
SET role = $1
WHERE id = $2
RETURNING id, username, password, email, role
`

type UpdateRoleParams struct {
	Role string
	ID   int64
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (User, error) {
	row := q.db.QueryRow(ctx, updateRole, arg.Role, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Role,
	)
	return i, err
}
