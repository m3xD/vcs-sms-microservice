// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: scope.sql

package db

import (
	"context"
)

const createScope = `-- name: CreateScope :one
INSERT INTO scopes ("name", "role")
VALUES ($1, $2)
RETURNING id, name, role
`

type CreateScopeParams struct {
	Name string
	Role string
}

func (q *Queries) CreateScope(ctx context.Context, arg CreateScopeParams) (Scope, error) {
	row := q.db.QueryRow(ctx, createScope, arg.Name, arg.Role)
	var i Scope
	err := row.Scan(&i.ID, &i.Name, &i.Role)
	return i, err
}

const deleteScope = `-- name: DeleteScope :exec
DELETE FROM scopes
WHERE id = $1
`

func (q *Queries) DeleteScope(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteScope, id)
	return err
}

const getScope = `-- name: GetScope :many
SELECT S.name FROM scopes S
JOIN users U ON U.role = S.role
WHERE U.id = $1
`

func (q *Queries) GetScope(ctx context.Context, id int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getScope, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateScope = `-- name: UpdateScope :one
UPDATE scopes
SET name = name = CASE WHEN $2::bool THEN $3::text ELSE name END,
    role = CASE WHEN $4::bool THEN $5::text ELSE role END
WHERE id = $1
RETURNING id, name, role
`

type UpdateScopeParams struct {
	ID      int64
	SetName bool
	Name    string
	SetRole bool
	Role    string
}

func (q *Queries) UpdateScope(ctx context.Context, arg UpdateScopeParams) (Scope, error) {
	row := q.db.QueryRow(ctx, updateScope,
		arg.ID,
		arg.SetName,
		arg.Name,
		arg.SetRole,
		arg.Role,
	)
	var i Scope
	err := row.Scan(&i.ID, &i.Name, &i.Role)
	return i, err
}
